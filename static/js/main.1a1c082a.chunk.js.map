{"version":3,"sources":["api/users.ts","services/user.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoForm/TodoForm.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","getUserById","userId","usersFromServer","find","user","UserInfo","className","href","TodoInfo","todo","completed","title","cn","style","listStyle","TodoList","todos","padding","margin","map","TodoForm","users","onAdd","useState","titleValue","setTitleValue","hasTitleError","setHasTitleError","setUserId","hasUserError","setHasUserError","validateTitle","test","action","method","onSubmit","event","preventDefault","trim","htmlFor","type","placeholder","value","onChange","target","disabled","todosList","App","setTodos","allTodos","newTodo","Math","max","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1a1c082a.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import usersFromServer from '../api/users';\n\nexport function getUserById(userId: number) {\n  return usersFromServer.find(user => user.id === userId);\n}\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    completed,\n    title,\n    user,\n  } = todo;\n\n  return (\n    <li\n      data-id={id}\n      className={cn('TodoInfo',\n        { ' TodoInfo--completed': completed })}\n      key={todo.id}\n      style={{ listStyle: 'none' }}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </li>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <ul\n      className=\"TodoList\"\n      style={{ padding: 0, margin: 0 }}\n    >\n      {\n        todos.map(todo => (\n          <TodoInfo todo={todo} key={todo.id} />\n        ))\n      }\n    </ul>\n  );\n};\n","import { useState } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { getUserById } from '../../services/user';\nimport { User } from '../../types/User';\n\ntype Props = {\n  users: User[];\n  onAdd: (todo: Todo) => void;\n};\n\nexport const TodoForm: React.FC<Props> = ({ users, onAdd }) => {\n  const [titleValue, setTitleValue] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [hasUserError, setHasUserError] = useState(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitleValue(event.target.value);\n    setHasTitleError(false);\n  };\n\n  const handleUserSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserError(false);\n  };\n\n  const validateTitle = () => {\n    // eslint-disable-next-line max-len\n    if (/[^a-zA-Z0-9s\\u0020\\u0406\\u0407\\u042c\\u045e\\u042f\\u0456\\u0457\\u044c\\u044e\\u044f\\u0410-\\u0429\\u0430-\\u0449]/.test(titleValue)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setHasTitleError(!titleValue.trim());\n    setHasUserError(!userId);\n\n    if (!validateTitle() || !userId || !titleValue.trim()) {\n      return;\n    }\n\n    onAdd({\n      id: 0,\n      title: titleValue.trim(),\n      completed: false,\n      userId,\n      user: getUserById(userId),\n    });\n\n    setTitleValue('');\n    setUserId(0);\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\">\n        <label htmlFor=\"title-input\">Title: </label>\n\n        <input\n          id=\"title-input\"\n          type=\"text\"\n          data-cy=\"titleInput\"\n          placeholder=\"Enter a title\"\n          value={titleValue}\n          onChange={handleTitleChange}\n        />\n        {hasTitleError && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n\n        {!validateTitle() && (\n          <span className=\"error\">\n            Please use only digits, &quot;en&quot; and &quot;ua&quot; characters\n          </span>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <label htmlFor=\"user-select\">User: </label>\n        <select\n          data-cy=\"userSelect\"\n          id=\"user-select\"\n          value={userId}\n          onChange={handleUserSelect}\n        >\n          <option value=\"0\" disabled>Choose a user</option>\n\n          {users.map(user => (\n            <option value={user.id} key={user.id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {hasUserError && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import './App.scss';\n\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { getUserById } from './services/user';\nimport { TodoList } from './components/TodoList';\nimport { TodoForm } from './components/TodoForm';\nimport { Todo } from './types/Todo';\n\nconst todosList = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todosList);\n\n  const getTodoId = (allTodos: Todo[]) => {\n    const newId = Math.max(...allTodos.map(todo => todo.id)) + 1;\n\n    return newId;\n  };\n\n  const onAdd = (todo: Todo) => {\n    const newTodo = {\n      ...todo,\n      id: getTodoId(todos),\n    };\n\n    setTodos([...todos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm users={usersFromServer} onAdd={onAdd} />\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}